# Claude Monitor Configuration
# ============================
#
# This is the main configuration file for Claude Monitor - the automated Claude Code recovery system.
# All settings are documented below with their default values and descriptions.

# Daemon Configuration
# --------------------
# Core daemon process settings
daemon:
  # Enable/disable the monitoring daemon
  enabled: true
  
  # Main loop interval in seconds (how often to check for new log entries)
  # Lower values = faster detection but higher CPU usage
  # Recommended range: 1.0 - 10.0 seconds
  loop_interval: 5.0
  
  # Status report interval in seconds (how often to log system status)
  # Set to 0 to disable periodic status reports
  status_report_interval: 300.0  # 5 minutes

# Logging Configuration
# --------------------
# Logging system settings for monitoring and debugging
logging:
  # Log level: DEBUG, INFO, WARNING, ERROR, CRITICAL
  level: INFO
  
  # Log file path - use absolute path for systemd service
  file: ./logs/claude-monitor.log
  
  # Console logging (stdout/stderr) - useful for development
  console:
    enabled: true
    level: INFO
    format: "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
  
  # File logging settings
  file_logging:
    enabled: true
    format: "%(asctime)s [%(levelname)s] %(name)s (%(process)d): %(message)s"
    date_format: "%Y-%m-%d %H:%M:%S"
  
  # Log rotation to prevent disk space issues
  rotation:
    enabled: true
    max_size: 10MB          # Maximum log file size
    backup_count: 5         # Number of backup files to keep
    rotate_on_startup: false # Rotate logs when daemon starts

# Component Configuration
# ----------------------
# Settings for individual monitoring components
components:
  
  # Log Parser - monitors Claude Code terminal output
  log_parser:
    enabled: true
    
    # Path to Claude Code terminal output log file
    # This file is created by Claude Code automatically
    log_file: ~/.local/share/claude_code/terminal_output.log
    
    # Alternative log file paths to check (in order of preference)
    fallback_log_files:
      - ~/.cache/claude_code/terminal_output.log
      - /tmp/claude_code_terminal.log
    
    # File monitoring settings
    monitoring:
      # How often to check for file changes (seconds)
      poll_interval: 1.0
      
      # Buffer size for reading log lines
      buffer_size: 8192
      
      # Maximum lines to read per polling cycle
      max_lines_per_cycle: 100
      
      # Whether to read from end of existing file on startup
      read_from_end: true
    
    # Context extraction settings
    context:
      # Number of lines to maintain for context analysis
      context_window: 10
      
      # Maximum age of context lines (seconds)
      max_context_age: 300
  
  # State Detector - analyzes log context to detect Claude Code states
  state_detector:
    enabled: true
    
    # Detection sensitivity (0.0 to 1.0, higher = more sensitive)
    sensitivity: 0.7
    
    # Minimum confidence threshold for state detection (0.0 to 1.0)
    min_confidence: 0.6
    
    # State detection intervals
    detection_interval: 2.0  # Seconds between detection cycles
    
    # State-specific thresholds
    state_thresholds:
      idle: 0.5              # Confidence needed to detect idle state
      input_waiting: 0.7     # Input prompt detection threshold
      context_pressure: 0.8  # Context pressure detection threshold
      error: 0.6             # Error state detection threshold
      active: 0.4            # Active processing state threshold
      completed: 0.7         # Task completion detection threshold
  
  # Recovery Engine - executes automated recovery actions
  recovery_engine:
    enabled: true
    
    # Global recovery settings
    max_retries: 3           # Maximum retry attempts per action
    retry_backoff: 2.0       # Retry delay multiplier
    action_timeout: 30.0     # Default timeout for recovery actions (seconds)
    
    # Cooldown periods to prevent excessive recovery attempts
    cooldown_period: 10.0    # Seconds between recovery attempts for same state
    global_cooldown: 5.0     # Minimum time between any recovery actions
    
    # TCP client settings for sending recovery commands
    tcp_client:
      host: localhost
      port: 9999
      connection_timeout: 5.0
      send_timeout: 3.0
      auto_reconnect: true
      keepalive: true
  
  # Task Monitor - integrates with spec-workflow MCP system
  task_monitor:
    enabled: false  # Disabled to avoid MCP timeout errors
    
    # Query intervals for checking task status
    query_interval: 30.0     # Seconds between status queries
    
    # MCP command settings
    mcp:
      timeout: 10.0          # Timeout for MCP commands
      max_failures: 3        # Max consecutive failures before backoff
      backoff_multiplier: 2.0 # Failure backoff multiplier
      max_backoff: 300.0     # Maximum backoff interval (5 minutes)
  
  # Notifier - handles user notifications and alerts
  notifier:
    enabled: true
    
    # Global notification settings
    min_priority: normal     # Minimum notification priority (low, normal, high, urgent)
    
    # Platform-specific settings
    platforms:
      linux:
        enabled: true
        prefer_notify_send: true
        timeout: 5000        # Notification timeout (milliseconds)
      
      macos:
        enabled: true
        sound: default       # Notification sound
      
      windows:
        enabled: true
        duration: 5          # Toast notification duration (seconds)
      
      fallback:
        enabled: true        # Console fallback always enabled
    
    # Notification filtering and rate limiting
    filtering:
      enabled: true
      
      # Rate limiting to prevent notification spam
      rate_limiting:
        enabled: true
        global:
          max_per_period: 20
          period_seconds: 60
        per_type:
          error:
            max_per_period: 5
            period_seconds: 60
          warning:
            max_per_period: 10
            period_seconds: 60

# Monitoring Target Configuration
# ------------------------------
# Specify what to monitor
monitoring:
  # Target project settings
  project_path: /mnt/d/repos/claude-monitor
  spec_name: claude-auto-recovery
  
  # Claude Code instance settings
  claude_code:
    # Expected Claude Code log file location
    log_path: ~/.local/share/claude_code/terminal_output.log
    
    # TCP bridge connection (if using expect bridge)
    tcp_bridge:
      enabled: true          # Enable TCP bridge communication
      host: localhost
      port: 9999

# Performance and Resource Configuration
# -------------------------------------
# Settings for system resource usage
performance:
  # Memory usage limits
  memory:
    # Maximum memory usage (MB) - system will attempt to stay under this
    max_usage_mb: 50
    
    # Enable memory monitoring and cleanup
    monitor_usage: true
    
    # Cleanup interval (seconds)
    cleanup_interval: 300
  
  # CPU usage settings
  cpu:
    # Target maximum CPU usage percentage
    max_usage_percent: 5.0
    
    # Enable CPU usage monitoring
    monitor_usage: true

# Development and Debugging
# -------------------------
# Settings useful for development and troubleshooting
development:
  # Enable development mode features
  debug_mode: false
  
  # Detailed logging for troubleshooting
  verbose_logging: false
  
  # Testing and validation
  dry_run: false           # Run without executing recovery actions
  validate_config: true    # Validate configuration on startup

# Environment-specific Overrides
# ------------------------------
# These settings can be overridden by environment variables
# Environment variable format: CLAUDE_MONITOR_<SECTION>_<KEY>
# Example: CLAUDE_MONITOR_DAEMON_LOOP_INTERVAL=2.0
#
# Supported environment variables:
# - CLAUDE_MONITOR_CONFIG_FILE: Override config file path
# - CLAUDE_MONITOR_LOG_LEVEL: Override log level
# - CLAUDE_MONITOR_LOG_FILE: Override log file path
# - CLAUDE_MONITOR_PROJECT_PATH: Override project path
# - CLAUDE_MONITOR_SPEC_NAME: Override spec name
# - CLAUDE_MONITOR_DEBUG: Enable debug mode (true/false)
# - CLAUDE_MONITOR_DRY_RUN: Enable dry run mode (true/false)