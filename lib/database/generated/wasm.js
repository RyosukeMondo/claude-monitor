
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('./runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.0
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.0",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.MonitorSessionScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  lastDetectedState: 'lastDetectedState',
  lastIdleClearAt: 'lastIdleClearAt',
  lastIdlePromptAt: 'lastIdlePromptAt',
  pendingBootstrap: 'pendingBootstrap',
  clearCompletedAt: 'clearCompletedAt',
  bootstrapCleared: 'bootstrapCleared',
  lastActiveSeenAt: 'lastActiveSeenAt',
  lastPostrunActionAt: 'lastPostrunActionAt',
  lastDecisionTs: 'lastDecisionTs',
  idlePeriodCleared: 'idlePeriodCleared',
  consecIdleCount: 'consecIdleCount',
  consecActiveCount: 'consecActiveCount',
  configPath: 'configPath',
  debugMode: 'debugMode',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DaemonStatisticsScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  startTime: 'startTime',
  uptimeSeconds: 'uptimeSeconds',
  restarts: 'restarts',
  configReloads: 'configReloads',
  totalDetections: 'totalDetections',
  totalRecoveries: 'totalRecoveries',
  errors: 'errors',
  decisionMinIntervalSec: 'decisionMinIntervalSec',
  clearCompletionFallbackSec: 'clearCompletionFallbackSec',
  consecIdleRequired: 'consecIdleRequired',
  inactivityIdleSec: 'inactivityIdleSec',
  minRecoveryIntervalSec: 'minRecoveryIntervalSec',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ComponentStatusScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  name: 'name',
  status: 'status',
  isRunning: 'isRunning',
  startedAt: 'startedAt',
  stoppedAt: 'stoppedAt',
  lastError: 'lastError',
  statistics: 'statistics',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RecoveryActionScalarFieldEnum = {
  id: 'id',
  sessionId: 'sessionId',
  state: 'state',
  actionType: 'actionType',
  timestamp: 'timestamp',
  success: 'success',
  errorMessage: 'errorMessage',
  throttledUntil: 'throttledUntil'
};

exports.Prisma.ConfigurationHistoryScalarFieldEnum = {
  id: 'id',
  configPath: 'configPath',
  configHash: 'configHash',
  configData: 'configData',
  loadedAt: 'loadedAt',
  isActive: 'isActive',
  errorMessage: 'errorMessage'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};


exports.Prisma.ModelName = {
  MonitorSession: 'MonitorSession',
  DaemonStatistics: 'DaemonStatistics',
  ComponentStatus: 'ComponentStatus',
  RecoveryAction: 'RecoveryAction',
  ConfigurationHistory: 'ConfigurationHistory'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/mnt/d/repos/claude-monitor/lib/database/generated",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/mnt/d/repos/claude-monitor/prisma/schema.prisma",
    "isCustomOutput": true
  },
  "relativeEnvPaths": {
    "rootEnvPath": null,
    "schemaEnvPath": "../../../.env"
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.0",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "sqlite",
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ngenerator client {\n  provider = \"prisma-client-js\"\n  output   = \"../lib/database/generated\"\n}\n\ndatasource db {\n  provider = \"sqlite\"\n  url      = env(\"DATABASE_URL\")\n}\n\n// Session tracking data model (based on Python daemon session variables)\nmodel MonitorSession {\n  id                  String    @id @default(cuid())\n  startTime           DateTime  @default(now())\n  endTime             DateTime?\n  lastDetectedState   String    @default(\"UNKNOWN\") // ClaudeState enum values\n  lastIdleClearAt     DateTime?\n  lastIdlePromptAt    DateTime?\n  pendingBootstrap    Boolean   @default(false)\n  clearCompletedAt    DateTime?\n  bootstrapCleared    Boolean   @default(false)\n  lastActiveSeenAt    DateTime?\n  lastPostrunActionAt DateTime?\n  lastDecisionTs      DateTime?\n  idlePeriodCleared   Boolean   @default(false)\n  consecIdleCount     Int       @default(0)\n  consecActiveCount   Int       @default(0)\n  configPath          String?\n  debugMode           Boolean   @default(false)\n\n  // Relationships\n  statistics      DaemonStatistics?\n  components      ComponentStatus[]\n  recoveryActions RecoveryAction[]\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"monitor_sessions\")\n}\n\n// Daemon statistics model (based on Python _stats dict)\nmodel DaemonStatistics {\n  id              String   @id @default(cuid())\n  sessionId       String   @unique\n  startTime       DateTime\n  uptimeSeconds   Float    @default(0)\n  restarts        Int      @default(0)\n  configReloads   Int      @default(0)\n  totalDetections Int      @default(0)\n  totalRecoveries Int      @default(0)\n  errors          Int      @default(0)\n\n  // Configuration parameters\n  decisionMinIntervalSec     Float @default(5.0)\n  clearCompletionFallbackSec Float @default(30.0)\n  consecIdleRequired         Int   @default(3)\n  inactivityIdleSec          Float @default(5.0)\n  minRecoveryIntervalSec     Float @default(2.0)\n\n  // Relationship\n  session MonitorSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@map(\"daemon_statistics\")\n}\n\n// Component status tracking\nmodel ComponentStatus {\n  id         String    @id @default(cuid())\n  sessionId  String\n  name       String // Component name (e.g., 'notifier', 'log_monitor')\n  status     String // Current status\n  isRunning  Boolean   @default(false)\n  startedAt  DateTime?\n  stoppedAt  DateTime?\n  lastError  String?\n  statistics Json? // Store component-specific statistics as JSON\n\n  // Relationship\n  session MonitorSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  @@unique([sessionId, name])\n  @@map(\"component_status\")\n}\n\n// Recovery actions log (based on recovery throttling by state)\nmodel RecoveryAction {\n  id             String    @id @default(cuid())\n  sessionId      String\n  state          String // State that triggered recovery\n  actionType     String // Type of recovery action taken\n  timestamp      DateTime  @default(now())\n  success        Boolean   @default(true)\n  errorMessage   String?\n  throttledUntil DateTime? // When this state can be recovered again\n\n  // Relationship\n  session MonitorSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n\n  @@map(\"recovery_actions\")\n}\n\n// Configuration history\nmodel ConfigurationHistory {\n  id           String   @id @default(cuid())\n  configPath   String?\n  configHash   String // Hash of config content for change detection\n  configData   Json // Store full config as JSON\n  loadedAt     DateTime @default(now())\n  isActive     Boolean  @default(true)\n  errorMessage String? // If config failed to load\n\n  @@map(\"configuration_history\")\n}\n",
  "inlineSchemaHash": "ffce4431a56179c951d81047d361c0017c83d0af74f6c9443c24e0f04e506a6e",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"MonitorSession\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastDetectedState\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastIdleClearAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastIdlePromptAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"pendingBootstrap\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"clearCompletedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"bootstrapCleared\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"lastActiveSeenAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastPostrunActionAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastDecisionTs\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"idlePeriodCleared\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"consecIdleCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"consecActiveCount\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"configPath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"debugMode\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"statistics\",\"kind\":\"object\",\"type\":\"DaemonStatistics\",\"relationName\":\"DaemonStatisticsToMonitorSession\"},{\"name\":\"components\",\"kind\":\"object\",\"type\":\"ComponentStatus\",\"relationName\":\"ComponentStatusToMonitorSession\"},{\"name\":\"recoveryActions\",\"kind\":\"object\",\"type\":\"RecoveryAction\",\"relationName\":\"MonitorSessionToRecoveryAction\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"monitor_sessions\"},\"DaemonStatistics\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startTime\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"uptimeSeconds\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"restarts\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"configReloads\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalDetections\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"totalRecoveries\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"errors\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"decisionMinIntervalSec\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"clearCompletionFallbackSec\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"consecIdleRequired\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"inactivityIdleSec\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"minRecoveryIntervalSec\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"MonitorSession\",\"relationName\":\"DaemonStatisticsToMonitorSession\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"daemon_statistics\"},\"ComponentStatus\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isRunning\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"startedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"stoppedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"lastError\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"statistics\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"MonitorSession\",\"relationName\":\"ComponentStatusToMonitorSession\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":\"component_status\"},\"RecoveryAction\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sessionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"state\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"actionType\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"timestamp\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"success\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"throttledUntil\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"session\",\"kind\":\"object\",\"type\":\"MonitorSession\",\"relationName\":\"MonitorSessionToRecoveryAction\"}],\"dbName\":\"recovery_actions\"},\"ConfigurationHistory\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"configPath\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"configHash\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"configData\",\"kind\":\"scalar\",\"type\":\"Json\"},{\"name\":\"loadedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"isActive\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"errorMessage\",\"kind\":\"scalar\",\"type\":\"String\"}],\"dbName\":\"configuration_history\"}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)

